{"version":3,"sources":["webpack:///src/src/App.vue","app.3ec7f560.css","webpack:///src/views/src/views/Home.vue","webpack:///src/views/src/views/Survey.vue","webpack:///src/views/src/views/Secret.vue"],"names":[],"mappings":"AAaA,KACA,6CAAA,CACA,kCAAA,CACA,iCAAA,CACA,eAAA,CACA,aAAA,CACA,SAAA,CACA,gBAAA,CACA,WAAA,CACA,aAAA,CACA,eAAA,CACA,YCXA,CDaA,UACA,eAAA,CACA,QAAA,CACA,SCXA,CCqFA,wBACA,qBAAA,CACA,YAAA,CACA,UDjFA,CCmFA,wCAEA,eDjFA,CCoFA,oBACA,oBAAA,CACA,SDlFA,CCqFA,oBACA,oBAAA,CACA,aDnFA,CCsFA,mBACA,aDpFA,CE+GA,wBACA,qBAAA,CACA,YAAA,CACA,UF3GA,CE6GA,wCAEA,eF3GA,CE8GA,oBACA,oBAAA,CACA,SF5GA,CE+GA,mBACA,aF7GA,CGzCA,4BACA,kBAAA,CACA,gBH6CA","file":"app.3ec7f560.css","sourcesContent":["<template>\n  <div id=\"app\">\n    <router-view/>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'app'\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: left;\n  color: #2c3e50;\n  width: 75%;\n  min-height: 100vh;\n  height: 100%;\n  margin: 0 auto;\n  background: #fff;\n  padding: 2rem;\n}\nbody, html {\n  background: #666;\n  margin: 0;\n  padding: 0;\n}\n</style>\n","\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: left;\n  color: #2c3e50;\n  width: 75%;\n  min-height: 100vh;\n  height: 100%;\n  margin: 0 auto;\n  background: #fff;\n  padding: 2rem;\n}\nbody, html {\n  background: #666;\n  margin: 0;\n  padding: 0;\n}\n\n\n.error[data-v-fc9a4186] {\n  border: 1px solid #aa0000;\n  padding: 1rem;\n  color: #aa0000;\n}\nh1[data-v-fc9a4186],\nh2[data-v-fc9a4186] {\n  font-weight: normal;\n}\nul[data-v-fc9a4186] {\n  list-style-type: none;\n  padding: 0;\n}\nli[data-v-fc9a4186] {\n  display: inline-block;\n  margin: 0 10px;\n}\na[data-v-fc9a4186] {\n  color: #42b983;\n}\n\n\n.error[data-v-76eba3e9] {\n  border: 1px solid #aa0000;\n  padding: 1rem;\n  color: #aa0000;\n}\nh1[data-v-76eba3e9],\nh2[data-v-76eba3e9] {\n  font-weight: normal;\n}\nul[data-v-76eba3e9] {\n  list-style-type: none;\n  padding: 0;\n}\na[data-v-76eba3e9] {\n  color: #42b983;\n}\n\n\n.component[data-v-34327ae5] {\n  background: #e8e8e8;\n  min-height: 400px;\n}\n\n\n/*# sourceMappingURL=app.3ec7f560.css.map*/","<template>\n  <div class=\"home\">\n    <div class=\"form-container\" v-show=\"showForm\">\n      <!-- TODO: Modulate display of the .form-container using v-show and the showForm variable. -->\n      <h1>Join the Web Developers Club!</h1>\n      <p>Sign up to access our special, secret page. Just create an account and answer a brief survey.</p>\n\n      <!-- TODO: Add an HTML element to display an error message for when the user submits invalid information. Use v-show to show/hide this message based on the validity of the form data. -->\n      <p\n        class=\"error\"\n        v-show=\"showError\"\n      >Please check the information you have entered. Be sure to fill in all the fields.</p>\n\n      <form v-on:submit.prevent=\"validateForm\">\n        <!-- TODO: Add the proper v-on directive to let the validateForm method handle this form when it is submitted -->\n        <!-- TODO: Add labels for each form field in this form. -->\n        <p>\n          <label for=\"username\">\n            Username\n            <input type=\"text\" id=\"username\" v-model=\"username\">\n          </label>\n        </p>\n\n        <!-- TODO: Add a username field. -->\n        <p>\n          <label for=\"email\">\n            Email\n            <input type=\"email\" id=\"email\" v-model=\"email\">\n          </label>\n        </p>\n\n        <!-- TODO: Add an email field. -->\n        <label for=\"password\">\n          Password\n          <input type=\"password\" id=\"password\" v-model=\"password\">\n        </label>\n\n        <!-- TODO: Add a password field. -->\n        <p>\n          <label for=\"passwordVerify\">\n            Verify Password\n            <input type=\"password\" id=\"passwordVerify\" v-model=\"passwordVerify\">\n          </label>\n        </p>\n        <p>\n          <!-- TODO: Add a passwordVerify field. -->\n        </p>\n        <p>\n          <input type=\"submit\" value=\"Submit\">\n        </p>\n      </form>\n    </div>\n    <div class=\"success-message\" v-show=\"!showForm\">\n      <!-- TODO: Modulate display of the .success-message using v-show and the showForm variable. -->\n      <h1>Thank you for signing up!</h1>\n      <p>\n        Please take our new member survey. <router-link to=\"/survey\">Click here</router-link>\n      </p>\n      <!-- TODO: Link \"Click here\" to the survey page. -->\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Home',\n  data () {\n    return {\n      username: '',\n      email: '',\n      password: '',\n      passwordVerify: '',\n      showForm: true,\n      showError: false\n    }\n  },\n  methods: {\n    validateForm: function () {\n      if ((this.username !== '') &&\n        (this.email !== '') &&\n        //check for empty password\n        (this.password === this.passwordVerify)\n      ) {\n        this.showForm = false;\n      } else {\n        this.showError = true;\n      }\n\n      // Validate the form by checking the following values:\n      // username must not be blank\n      // email must not be blank\n      // password and passwordVerify must be equal\n      //\n      // When the form is validated, show the .success-message content\n      // If the form is invalid, show the form error message\n\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.error {\n  border: 1px solid #aa0000;\n  padding: 1rem;\n  color: #aa0000;\n}\nh1,\nh2 {\n  font-weight: normal;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\n\na {\n  color: #42b983;\n}\n</style>\n","<template>\n  <div class=\"survey\">\n    <h1>New Member Survey</h1>\n    <p>Please complete the new member survey.</p>\n    <form v-on:submit.prevent=\"validateForm\">\n      <!-- TODO: Set up the proper v-on directive to handle the form submission. -->\n      <!-- TODO: Add an error message to be displayed when the user submits invalid form data. -->\n      <p\n        class=\"error\"\n        v-show=\"showError\"\n      >Please check the information our have entered. Be sure to fill in all fields.</p>\n\n      <p>\n        <label for=\"q1\">Q1: How long have you been building websites?\n          <br>\n          <input type=\"text\" id=\"q1\" v-model=\"q1\">\n        </label>\n      </p>\n      <!-- TODO: Add the proper v-model directive to this input element. -->\n      <p>Q2: What languages interest you the most?\n        <br>\n        <!-- TODO: Create a loop to duplicate the label element and structures it contains for each item in the languageOptions array. -->\n        <label v-for=\"(language,index) in languageOptions\" :key=\"index\">\n          <input type=\"checkbox\" v-model=\"q2\" :value=\"language.value\">\n          {{ language.text}}\n          <!-- TODO: Set the proper v-model directive and use v-bind:value to set the value for this checkbox. -->\n          <!-- TODO: Output the text to display this option to the user. -->\n        </label>\n      </p>\n\n      <p>Q3: What other topics interest you?\n        <br>\n        <!-- TODO: Create a loop to duplicate the label element and structures it contains for each item in the topicOptions array. -->\n        <label v-for=\"(topic,index) in topicOptions\" :key=\"index\">\n          <input type=\"checkbox\" v-model=\"q3\" :value=\"topic.value\">\n          <!-- TODO: Set the proper v-model directive and use v-bind:value to set the value for this checkbox. -->\n          <!-- TODO: Output the text to display this option to the user. -->\n          {{topic.text}}\n        </label>\n      </p>\n      <p>\n        <label for=\"q4\">Q4: What kinds of websites would you like to build someday?\n          <br>\n          <textarea cols=\"70\" rows=\"8\" id=\"q4\" placeholder=\"Type your response here.\" v-model=\"q4\"></textarea>\n          <!-- TODO: Set the proper v-model directive on this textarea. -->\n        </label>\n      </p>\n      <p>\n        <label for=\"q5\">\n          Q5: Spaces or Tabs?\n          <select id=\"q5\" v-model=\"q5\">\n            <!-- TODO: Set the proper v-model directive on this select element. -->\n            <option value>Select your preference.</option>\n            <option value=\"spaces\">Spaces</option>\n            <option value=\"tabs\">Tabs</option>\n          </select>\n        </label>\n      </p>\n      <p>\n        <input type=\"submit\" value=\"Submit\">\n      </p>\n    </form>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Survey',\n  data () {\n    return {\n      showError: false,\n      q1: '',\n      q2: [],\n      q3: [],\n      q4: '',\n      q5: '',\n      languageOptions: [\n        {\n          text: 'JavaScript',\n          value: 'js'\n        },\n        {\n          text: 'Python',\n          value: 'py'\n        },\n        {\n          text: 'Ruby',\n          value: 'ruby'\n        },\n        {\n          text: 'Java',\n          value: 'java'\n        },\n        {\n          text: 'PHP',\n          value: 'php'\n        }\n      ],\n      topicOptions: [\n        {\n          text: 'Accessibility',\n          value: 'axe'\n        },\n        {\n          text: 'Experience Design',\n          value: 'ux'\n        },\n        {\n          text: 'Operations',\n          value: 'ops'\n        },\n        {\n          text: 'Search Engine Optimization',\n          value: 'seo'\n        },\n        {\n          text: 'Multimedia',\n          value: 'media'\n        }\n      ]\n    }\n  },\n  methods: {\n    validateForm: function () {\n      if ((this.q1 !== '') &&\n        (this.q2.length !== 0) &&\n        (this.q3.length !== 0) &&\n        (this.q4 !== '') &&\n        (this.q5 !== '')\n      ) {\n        this.$router.push('secret');\n      } else {\n        this.showError = true;\n      }\n      // TODO: Validate the data submitted by the user according to these rules:\n      // q1 must not be blank\n      // q2.length must be greater than 0\n      // q3.length must be greater than 0\n      // q4 must not be blank\n      // q5 must not be blank\n\n      // TODO: If all of the data is valid, then use the $router to move the user to the Secret page.\n      // TODO: If the data is not valid, alter the value of showError to show the error message.\n\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.error {\n  border: 1px solid #aa0000;\n  padding: 1rem;\n  color: #aa0000;\n}\nh1,\nh2 {\n  font-weight: normal;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\na {\n  color: #42b983;\n}\n</style>\n","<template>\n  <div class=\"component\">\n    <h2>{{ message }}</h2>\n  </div>\n</template>\n\n<script>\n  export default {\n    data () {\n      return {\n        message: 'This component works.'\n      }\n    }\n  }\n</script>\n\n<style scoped>\n  .component {\n    background: #e8e8e8;\n    min-height: 400px;\n  }\n</style>"]}